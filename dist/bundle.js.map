{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://cards-game/./src/main.ts"],"sourcesContent":["import './styles.css'\n\nlet radios = Array.from(document.querySelectorAll<HTMLInputElement>('.radios'))\nlet startScreen = document.querySelector('.content-box')\nlet victoryScreen = document.querySelector('.victory-lose-screen')\nlet spentMinutes = document.querySelector('.time-spent-minutes')\nlet spentSeconds = document.querySelector('.time-spent-seconds')\nlet victoryButton = document.getElementById('victory-restart-button')\nlet victoryLoseText = document.querySelector('.victory-lose-text')\nlet victoryLoseIcon = document.querySelector('.victory-lose-icon')\nlet easyGame = document.querySelector('.easy-game')\nlet mediumGame = document.querySelector('.medium-game')\nlet hardGame = document.querySelector('.hard-game')\nlet restartButton = document.querySelector('.restart-button')\nlet stopwatchBox = document.querySelector('.stopwatch')\nlet minutesBox = document.querySelector('.minutes')\nlet secondsBox = document.querySelector('.seconds')\nlet formElement = document.querySelector('.form')\nlet level: string = 'Easy'\nlet minutes: number = 0\nlet seconds: number = 0\nlet cardToCompare: HTMLElement | null = null\nlet busy: boolean\nlet result: string = ''\nlet interval: number\nlet matchedCards: HTMLElement[] = []\n\nfunction createCards() {\n    let allCards: string[] = []\n    for (let i = 1; i < 37; i++) {\n        allCards.push(\n            `<div class=\"card card${i}\" data-index=\"${i}\">\n      <div class=\"card-back card-face\"></div>\n      <div class=\"card-front card-face\"></div>\n    </div>`\n        )\n    }\n    return allCards\n}\n\nfunction canFlipCard(card: Element) {\n    return !busy && cardToCompare !== card\n}\n\nfunction showVictoryLoseScreen() {\n    victoryScreen?.classList.add('visible')\n    stopwatchBox?.classList.remove('visible')\n    easyGame?.classList.remove('visible-cards')\n    mediumGame?.classList.remove('visible-cards')\n    hardGame?.classList.remove('visible-cards')\n    if (spentMinutes && minutesBox)\n        spentMinutes.innerHTML = minutesBox.innerHTML\n    if (spentSeconds && secondsBox)\n        spentSeconds.innerHTML = secondsBox.innerHTML\n    if (victoryButton) victoryButton.addEventListener('click', beginGame)\n    if (result === 'victory') {\n        if (victoryLoseText) victoryLoseText.innerHTML = 'Вы выиграли!'\n        victoryLoseIcon?.classList.remove('dead')\n        victoryLoseIcon?.classList.add('celebration')\n    } else {\n        if (victoryLoseText) victoryLoseText.innerHTML = 'Вы проиграли!'\n        victoryLoseIcon?.classList.remove('celebration')\n        victoryLoseIcon?.classList.add('dead')\n    }\n}\n\nfunction checkForCardMatch(card: HTMLElement, nums: String[]) {\n    setTimeout((): void => {\n        if (card.dataset.index === cardToCompare?.dataset.index) {\n            matchedCards.push(card)\n            if (cardToCompare) {\n                matchedCards.push(cardToCompare)\n            }\n            console.log(nums)\n            console.log(matchedCards)\n            if (matchedCards.length === nums.length) {\n                result = 'victory'\n                showVictoryLoseScreen()\n            }\n        } else {\n            result = 'lose'\n            showVictoryLoseScreen()\n        }\n\n        cardToCompare = null\n        busy = false\n    }, 1000)\n}\n\nfunction flipCards(nums: string[]) {\n    let cards: HTMLElement[] = Array.from(document.querySelectorAll('.card'))\n    cards.forEach((card) => {\n        card.addEventListener('click', () => {\n            if (canFlipCard(card)) {\n                card.classList.add('visible')\n                if (cardToCompare) {\n                    busy = true\n                    checkForCardMatch(card, nums)\n                } else {\n                    cardToCompare = card\n                }\n            }\n        })\n    })\n}\n\nfunction shuffleCardsAndShow() {\n    let cards: HTMLElement[] = Array.from(document.querySelectorAll('.card'))\n\n    for (let i = cards.length - 1; i > 0; i--) {\n        let randIndex = Math.floor(Math.random() * (i + 1))\n        cards[randIndex].style.order = String(i)\n        cards[i].style.order = String(randIndex)\n    }\n\n    setTimeout(() => {\n        cards.forEach((card) => {\n            card.classList.add('visible')\n        })\n    }, 1000)\n\n    setTimeout(() => {\n        cards.forEach((card) => {\n            card.classList.remove('visible')\n        })\n        busy = false\n    }, 5000)\n}\n\nfunction showEasyScreen(cardsArray: string[]) {\n    let easyCards = []\n    let indexes: String[] = []\n    for (let i = 3; i > 0; i--) {\n        let randIndex = Math.floor(Math.random() * (35 + 1))\n        if (!indexes.includes(String(randIndex))) {\n            easyCards.push(cardsArray[randIndex])\n            easyCards.push(cardsArray[randIndex])\n            indexes.push(String(randIndex))\n        } else {\n            i++\n        }\n    }\n\n    let easyCardsHTML = ''\n    easyCards.forEach((card) => {\n        easyCardsHTML += card\n    })\n\n    if (easyGame) easyGame.innerHTML = easyCardsHTML\n    shuffleCardsAndShow()\n    flipCards(easyCards)\n}\n\nfunction showMediumScreen(cardsArray: string[]) {\n    let mediumCards = []\n    let indexes: String[] = []\n    for (let i = 6; i > 0; i--) {\n        let randIndex = Math.floor(Math.random() * (35 + 1))\n        if (!indexes.includes(String(randIndex))) {\n            mediumCards.push(cardsArray[randIndex])\n            mediumCards.push(cardsArray[randIndex])\n            indexes.push(String(randIndex))\n        } else {\n            i++\n        }\n    }\n\n    let mediumCardsHTML = ''\n    mediumCards.forEach((card) => {\n        mediumCardsHTML += card\n    })\n\n    if (mediumGame) mediumGame.innerHTML = mediumCardsHTML\n    shuffleCardsAndShow()\n    flipCards(mediumCards)\n}\n\nfunction showHardScreen(cardsArray: string[]) {\n    let hardCards = []\n    let indexes: String[] = []\n    for (let i = 9; i > 0; i--) {\n        let randIndex = Math.floor(Math.random() * (35 + 1))\n        if (!indexes.includes(String(randIndex))) {\n            hardCards.push(cardsArray[randIndex])\n            hardCards.push(cardsArray[randIndex])\n            indexes.push(String(randIndex))\n        } else {\n            i++\n        }\n    }\n\n    let hardCardsHTML = ''\n    hardCards.forEach((card) => {\n        hardCardsHTML += card\n    })\n\n    if (hardGame) hardGame.innerHTML = hardCardsHTML\n    shuffleCardsAndShow()\n    flipCards(hardCards)\n}\n\nfunction chooseLevel() {\n    if (event) event.preventDefault()\n    startScreen?.classList.remove('visible')\n    stopwatchBox?.classList.add('visible')\n    restartButton?.addEventListener('click', beginGame)\n    let cardsArray = createCards()\n\n    radios.forEach((radio) => {\n        if (radio.checked) {\n            level = radio.value\n        }\n    })\n\n    if (level === 'Easy') {\n        easyGame?.classList.add('visible-cards')\n        showEasyScreen(cardsArray)\n    } else if (level === 'Medium') {\n        mediumGame?.classList.add('visible-cards')\n        showMediumScreen(cardsArray)\n    } else if (level === 'Hard') {\n        hardGame?.classList.add('visible-cards')\n        showHardScreen(cardsArray)\n    }\n\n    const startStopwatch = (): void => {\n        seconds++\n        if (secondsBox && minutesBox) {\n            secondsBox.innerHTML = '0' + seconds\n\n            if (seconds > 9) {\n                secondsBox.innerHTML = String(seconds)\n            }\n\n            if (seconds > 59) {\n                minutes++\n                minutesBox.innerHTML = '0' + minutes\n                seconds = 0\n            }\n\n            if (minutes > 9) {\n                minutesBox.innerHTML = String(minutes)\n            }\n        }\n    }\n\n    if (stopwatchBox) {\n        setTimeout(() => {\n            interval = Number(setInterval(startStopwatch, 1000))\n        }, 5000)\n    }\n}\n\nfunction beginGame() {\n    minutes = 0\n    seconds = 0\n    busy = true\n    cardToCompare = null\n    matchedCards = []\n    if (secondsBox) secondsBox.innerHTML = '00'\n    if (minutesBox) minutesBox.innerHTML = '00'\n    clearInterval(interval)\n\n    startScreen?.classList.add('visible')\n    easyGame?.classList.remove('visible-cards')\n    hardGame?.classList.remove('visible-cards')\n    mediumGame?.classList.remove('visible-cards')\n    stopwatchBox?.classList.remove('visible')\n    victoryScreen?.classList.remove('visible')\n\n    if (formElement) formElement.addEventListener('submit', chooseLevel)\n}\n\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', beginGame)\n} else {\n    beginGame()\n}\n"],"names":["busy","interval","radios","Array","from","document","querySelectorAll","startScreen","querySelector","victoryScreen","spentMinutes","spentSeconds","victoryButton","getElementById","victoryLoseText","victoryLoseIcon","easyGame","mediumGame","hardGame","restartButton","stopwatchBox","minutesBox","secondsBox","formElement","level","minutes","seconds","cardToCompare","result","matchedCards","showVictoryLoseScreen","classList","add","remove","innerHTML","addEventListener","beginGame","flipCards","nums","forEach","card","canFlipCard","setTimeout","dataset","index","push","console","log","length","checkForCardMatch","shuffleCardsAndShow","cards","i","randIndex","Math","floor","random","style","order","String","chooseLevel","event","preventDefault","cardsArray","allCards","createCards","radio","checked","value","easyCards","indexes","includes","easyCardsHTML","showEasyScreen","mediumCards","mediumCardsHTML","showMediumScreen","hardCards","hardCardsHTML","showHardScreen","startStopwatch","Number","setInterval","clearInterval","readyState"],"sourceRoot":""}