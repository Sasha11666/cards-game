{"version":3,"file":"bundle.js","mappings":"mBAEA,IAuBIA,EAEAC,EAzBEC,EAASC,MAAMC,KACjBC,SAASC,iBAAmC,YAE1CC,EAAcF,SAASG,cAAc,gBACrCC,EAAgBJ,SAASG,cAAc,wBACvCE,EAAeL,SAASG,cAAc,uBACtCG,EAAeN,SAASG,cAAc,uBACtCI,EAAgBP,SAASQ,eAAe,0BACxCC,EAAkBT,SAASG,cAAc,sBACzCO,EAAkBV,SAASG,cAAc,sBACzCQ,EAAWX,SAASG,cAAc,cAClCS,EAAaZ,SAASG,cAAc,gBACpCU,EAAWb,SAASG,cAAc,cAClCW,EAAgBd,SAASG,cAAc,mBACvCY,EAAef,SAASG,cAAc,cACtCa,EAAahB,SAASG,cAAc,YACpCc,EAAajB,SAASG,cAAc,YACpCe,EAAclB,SAASG,cAAc,SACrCgB,EAASnB,SAASG,cAAc,UAClCiB,EAAQ,OACRC,EAAU,EACVC,EAAU,EACVC,EAAoC,KAEpCC,EAAS,GAETC,EAA8B,GAC5BC,EAAY,IAAIC,MAAM,iCACtBC,EAAa,IAAID,MAAM,+BACvBE,EAAe,IAAIF,MAAM,+BACzBG,EAAgB,IAAIH,MAAM,iCAC1BI,EAAa,IAAIJ,MAAM,6BAsB7B,SAASK,IACL5B,SAAAA,EAAe6B,UAAUC,IAAI,WAC7BnB,SAAAA,EAAckB,UAAUE,OAAO,WAC/BxB,SAAAA,EAAUsB,UAAUE,OAAO,iBAC3BvB,SAAAA,EAAYqB,UAAUE,OAAO,iBAC7BtB,SAAAA,EAAUoB,UAAUE,OAAO,iBACvB9B,GAAgBW,IAChBX,EAAa+B,UAAYpB,EAAWoB,WACpC9B,GAAgBW,IAChBX,EAAa8B,UAAYnB,EAAWmB,WACpC7B,GACAA,EAAc8B,iBAAiB,SAAS,WACpCN,EAAWO,OACXC,GACJ,IACW,YAAXf,GACIf,IAAiBA,EAAgB2B,UAAY,gBACjD1B,SAAAA,EAAiBuB,UAAUE,OAAO,QAClCzB,SAAAA,EAAiBuB,UAAUC,IAAI,iBAE3BzB,IAAiBA,EAAgB2B,UAAY,iBACjD1B,SAAAA,EAAiBuB,UAAUE,OAAO,eAClCzB,SAAAA,EAAiBuB,UAAUC,IAAI,QAEvC,CA4BA,SAASM,EAAUC,GACc3C,MAAMC,KAAKC,SAASC,iBAAiB,UAC5DyC,SAAQ,SAACC,GACXA,EAAKN,iBAAiB,SAAS,YA3DvC,SAAqBM,GACjB,OAAQhD,GAAQ4B,IAAkBoB,CACtC,EA0DgBC,CAAYD,KACZjB,EAAUY,OACVK,EAAKV,UAAUC,IAAI,WACfX,GACA5B,GAAO,EAlC3B,SAA2BgD,EAAmBF,GAC1CI,YAAW,WACHF,EAAKG,QAAQC,SAAUxB,aAAa,EAAbA,EAAeuB,QAAQC,QAC9CnB,EAAWU,OACXb,EAAauB,KAAKL,GACdpB,GACAE,EAAauB,KAAKzB,GAEtB0B,QAAQC,IAAIT,GACZQ,QAAQC,IAAIzB,GACRA,EAAa0B,SAAWV,EAAKU,SAC7BtB,EAAaS,OACbd,EAAS,UACTQ,OAGJF,EAAcQ,OACdd,EAAS,OACTQ,KAGJT,EAAgB,KAChB5B,GAAO,CACX,GAAG,IACP,CAWoByD,CAAkBT,EAAMF,IAExBlB,EAAgBoB,EAG5B,GACJ,GACJ,CAEA,SAASU,IAGL,IAFA,IAAMC,EAAuBxD,MAAMC,KAAKC,SAASC,iBAAiB,UAEzDsD,EAAID,EAAMH,OAAS,EAAGI,EAAI,EAAGA,IAAK,CACvC,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IAClDD,EAAME,GAAWI,MAAMC,MAAQC,OAAOP,GACtCD,EAAMC,GAAGK,MAAMC,MAAQC,OAAON,E,CAGlCX,YAAW,WACPS,EAAMZ,SAAQ,SAACC,GACXA,EAAKV,UAAUC,IAAI,UACvB,GACJ,GAAG,KAEHW,YAAW,WACPS,EAAMZ,SAAQ,SAACC,GACXA,EAAKV,UAAUE,OAAO,UAC1B,IACAxC,GAAO,CACX,GAAG,IACP,CA0EA,SAASoE,IACDC,OAAOA,MAAMC,iBACjB/D,SAAAA,EAAa+B,UAAUE,OAAO,WAC9BpB,SAAAA,EAAckB,UAAUC,IAAI,WAC5BpB,SAAAA,EAAeuB,iBAAiB,SAAS,WACrCN,EAAWO,OACXC,GACJ,IACA,IAAM2B,EA9LV,WAEI,IADA,IAAMC,EAAqB,GAClBZ,EAAI,EAAGA,EAAI,GAAIA,IACpBY,EAASnB,KACL,+BAAwBO,EAAC,yBAAiBA,EAAC,kHAMnD,OAAOY,CACX,CAmLuBC,GAEnBvE,EAAO6C,SAAQ,SAAC2B,GACRA,EAAMC,UACNlD,EAAQiD,EAAME,MAEtB,IAEc,SAAVnD,GACAT,SAAAA,EAAUsB,UAAUC,IAAI,iBAzFhC,SAAwBgC,GAGpB,IAFA,IAAMM,EAAY,GACZC,EAAoB,GACjBlB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMC,EAAYC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7Bc,EAAQC,SAASZ,OAAON,IAKzBD,KAJAiB,EAAUxB,KAAKkB,EAAWV,IAC1BgB,EAAUxB,KAAKkB,EAAWV,IAC1BiB,EAAQzB,KAAKc,OAAON,I,CAM5B,IAAImB,EAAgB,GACpBH,EAAU9B,SAAQ,SAACC,GACfgC,GAAiBhC,CACrB,IAEIhC,IAAUA,EAASyB,UAAYuC,GACnCtB,IACAb,EAAUgC,EACd,CAoEQI,CAAeV,IACE,WAAV9C,GACPR,SAAAA,EAAYqB,UAAUC,IAAI,iBApElC,SAA0BgC,GAGtB,IAFA,IAAMW,EAAc,GACdJ,EAAoB,GACjBlB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMC,EAAYC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7Bc,EAAQC,SAASZ,OAAON,IAKzBD,KAJAsB,EAAY7B,KAAKkB,EAAWV,IAC5BqB,EAAY7B,KAAKkB,EAAWV,IAC5BiB,EAAQzB,KAAKc,OAAON,I,CAM5B,IAAIsB,EAAkB,GACtBD,EAAYnC,SAAQ,SAACC,GACjBmC,GAAmBnC,CACvB,IAEI/B,IAAYA,EAAWwB,UAAY0C,GACvCzB,IACAb,EAAUqC,EACd,CA+CQE,CAAiBb,IACA,SAAV9C,IACPP,SAAAA,EAAUoB,UAAUC,IAAI,iBA/ChC,SAAwBgC,GAGpB,IAFA,IAAMc,EAAY,GACZP,EAAoB,GACjBlB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMC,EAAYC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7Bc,EAAQC,SAASZ,OAAON,IAKzBD,KAJAyB,EAAUhC,KAAKkB,EAAWV,IAC1BwB,EAAUhC,KAAKkB,EAAWV,IAC1BiB,EAAQzB,KAAKc,OAAON,I,CAM5B,IAAIyB,EAAgB,GACpBD,EAAUtC,SAAQ,SAACC,GACfsC,GAAiBtC,CACrB,IAEI9B,IAAUA,EAASuB,UAAY6C,GACnC5B,IACAb,EAAUwC,EACd,CA0BQE,CAAehB,IAGnB,IAAMiB,EAAiB,WACnB7D,IACIL,GAAcD,IACdC,EAAWmB,UAAY,IAAMd,EAEzBA,EAAU,IACVL,EAAWmB,UAAY0B,OAAOxC,IAG9BA,EAAU,KACVD,IACAL,EAAWoB,UAAY,IAAMf,EAC7BC,EAAU,GAGVD,EAAU,IACVL,EAAWoB,UAAY0B,OAAOzC,IAG1C,EAEIN,GACA8B,YAAW,WACPjD,EAAWwF,OAAOC,YAAYF,EAAgB,KAClD,GAAG,IAEX,CAEA,SAAS5C,IACLlB,EAAU,EACVC,EAAU,EACV3B,GAAO,EACP4B,EAAgB,KAChBE,EAAe,GACXR,IAAYA,EAAWmB,UAAY,MACnCpB,IAAYA,EAAWoB,UAAY,MACvCkD,cAAc1F,GACdkC,EAAcyD,QACd1D,EAAa0D,QACbzD,EAAc0D,YAAc,EAC5B3D,EAAa2D,YAAc,EAE3BtF,SAAAA,EAAa+B,UAAUC,IAAI,WAC3BvB,SAAAA,EAAUsB,UAAUE,OAAO,iBAC3BtB,SAAAA,EAAUoB,UAAUE,OAAO,iBAC3BvB,SAAAA,EAAYqB,UAAUE,OAAO,iBAC7BpB,SAAAA,EAAckB,UAAUE,OAAO,WAC/B/B,SAAAA,EAAe6B,UAAUE,OAAO,WAE5BjB,GAAaA,EAAYmB,iBAAiB,SAAU0B,EAC5D,CAvQA5C,SAAAA,EAAQkB,iBAAiB,SAAS,WAC9BN,EAAWO,MACf,IAuQ4B,YAAxBtC,SAASyF,WACTzF,SAASqC,iBAAiB,mBAAoBE,GAE9CA,G","sources":["webpack://cards-game/./src/main.ts"],"sourcesContent":["import './styles.css'\n\nconst radios = Array.from(\n    document.querySelectorAll<HTMLInputElement>('.radios')\n)\nconst startScreen = document.querySelector('.content-box')\nconst victoryScreen = document.querySelector('.victory-lose-screen')\nconst spentMinutes = document.querySelector('.time-spent-minutes')\nconst spentSeconds = document.querySelector('.time-spent-seconds')\nconst victoryButton = document.getElementById('victory-restart-button')\nconst victoryLoseText = document.querySelector('.victory-lose-text')\nconst victoryLoseIcon = document.querySelector('.victory-lose-icon')\nconst easyGame = document.querySelector('.easy-game')\nconst mediumGame = document.querySelector('.medium-game')\nconst hardGame = document.querySelector('.hard-game')\nconst restartButton = document.querySelector('.restart-button')\nconst stopwatchBox = document.querySelector('.stopwatch')\nconst minutesBox = document.querySelector('.minutes')\nconst secondsBox = document.querySelector('.seconds')\nconst formElement = document.querySelector('.form')\nconst button = document.querySelector('button')\nlet level = 'Easy'\nlet minutes = 0\nlet seconds = 0\nlet cardToCompare: HTMLElement | null = null\nlet busy: boolean\nlet result = ''\nlet interval: number\nlet matchedCards: HTMLElement[] = []\nconst flipSound = new Audio('../static/audio/card-flip.mp3')\nconst matchSound = new Audio('../static/audio/success.mp3')\nconst victorySound = new Audio('../static/audio/victory.mp3')\nconst gameOverSound = new Audio('../static/audio/game-over.mp3')\nconst clickSound = new Audio('../static/audio/click.mp3')\nbutton?.addEventListener('click', () => {\n    clickSound.play()\n})\n\nfunction createCards() {\n    const allCards: string[] = []\n    for (let i = 1; i < 37; i++) {\n        allCards.push(\n            `<div class=\"card card${i}\" data-index=\"${i}\">\n      <div class=\"card-back card-face\"></div>\n      <div class=\"card-front card-face\"></div>\n    </div>`\n        )\n    }\n    return allCards\n}\n\nfunction canFlipCard(card: Element) {\n    return !busy && cardToCompare !== card\n}\n\nfunction showVictoryLoseScreen() {\n    victoryScreen?.classList.add('visible')\n    stopwatchBox?.classList.remove('visible')\n    easyGame?.classList.remove('visible-cards')\n    mediumGame?.classList.remove('visible-cards')\n    hardGame?.classList.remove('visible-cards')\n    if (spentMinutes && minutesBox)\n        spentMinutes.innerHTML = minutesBox.innerHTML\n    if (spentSeconds && secondsBox)\n        spentSeconds.innerHTML = secondsBox.innerHTML\n    if (victoryButton)\n        victoryButton.addEventListener('click', () => {\n            clickSound.play()\n            beginGame()\n        })\n    if (result === 'victory') {\n        if (victoryLoseText) victoryLoseText.innerHTML = 'Вы выиграли!'\n        victoryLoseIcon?.classList.remove('dead')\n        victoryLoseIcon?.classList.add('celebration')\n    } else {\n        if (victoryLoseText) victoryLoseText.innerHTML = 'Вы проиграли!'\n        victoryLoseIcon?.classList.remove('celebration')\n        victoryLoseIcon?.classList.add('dead')\n    }\n}\n\nfunction checkForCardMatch(card: HTMLElement, nums: string[]) {\n    setTimeout((): void => {\n        if (card.dataset.index === cardToCompare?.dataset.index) {\n            matchSound.play()\n            matchedCards.push(card)\n            if (cardToCompare) {\n                matchedCards.push(cardToCompare)\n            }\n            console.log(nums)\n            console.log(matchedCards)\n            if (matchedCards.length === nums.length) {\n                victorySound.play()\n                result = 'victory'\n                showVictoryLoseScreen()\n            }\n        } else {\n            gameOverSound.play()\n            result = 'lose'\n            showVictoryLoseScreen()\n        }\n\n        cardToCompare = null\n        busy = false\n    }, 1000)\n}\n\nfunction flipCards(nums: string[]) {\n    const cards: HTMLElement[] = Array.from(document.querySelectorAll('.card'))\n    cards.forEach((card) => {\n        card.addEventListener('click', () => {\n            if (canFlipCard(card)) {\n                flipSound.play()\n                card.classList.add('visible')\n                if (cardToCompare) {\n                    busy = true\n                    checkForCardMatch(card, nums)\n                } else {\n                    cardToCompare = card\n                }\n            }\n        })\n    })\n}\n\nfunction shuffleCardsAndShow() {\n    const cards: HTMLElement[] = Array.from(document.querySelectorAll('.card'))\n\n    for (let i = cards.length - 1; i > 0; i--) {\n        const randIndex = Math.floor(Math.random() * (i + 1))\n        cards[randIndex].style.order = String(i)\n        cards[i].style.order = String(randIndex)\n    }\n\n    setTimeout(() => {\n        cards.forEach((card) => {\n            card.classList.add('visible')\n        })\n    }, 1000)\n\n    setTimeout(() => {\n        cards.forEach((card) => {\n            card.classList.remove('visible')\n        })\n        busy = false\n    }, 5000)\n}\n\nfunction showEasyScreen(cardsArray: string[]) {\n    const easyCards = []\n    const indexes: string[] = []\n    for (let i = 3; i > 0; i--) {\n        const randIndex = Math.floor(Math.random() * (35 + 1))\n        if (!indexes.includes(String(randIndex))) {\n            easyCards.push(cardsArray[randIndex])\n            easyCards.push(cardsArray[randIndex])\n            indexes.push(String(randIndex))\n        } else {\n            i++\n        }\n    }\n\n    let easyCardsHTML = ''\n    easyCards.forEach((card) => {\n        easyCardsHTML += card\n    })\n\n    if (easyGame) easyGame.innerHTML = easyCardsHTML\n    shuffleCardsAndShow()\n    flipCards(easyCards)\n}\n\nfunction showMediumScreen(cardsArray: string[]) {\n    const mediumCards = []\n    const indexes: string[] = []\n    for (let i = 6; i > 0; i--) {\n        const randIndex = Math.floor(Math.random() * (35 + 1))\n        if (!indexes.includes(String(randIndex))) {\n            mediumCards.push(cardsArray[randIndex])\n            mediumCards.push(cardsArray[randIndex])\n            indexes.push(String(randIndex))\n        } else {\n            i++\n        }\n    }\n\n    let mediumCardsHTML = ''\n    mediumCards.forEach((card) => {\n        mediumCardsHTML += card\n    })\n\n    if (mediumGame) mediumGame.innerHTML = mediumCardsHTML\n    shuffleCardsAndShow()\n    flipCards(mediumCards)\n}\n\nfunction showHardScreen(cardsArray: string[]) {\n    const hardCards = []\n    const indexes: string[] = []\n    for (let i = 9; i > 0; i--) {\n        const randIndex = Math.floor(Math.random() * (35 + 1))\n        if (!indexes.includes(String(randIndex))) {\n            hardCards.push(cardsArray[randIndex])\n            hardCards.push(cardsArray[randIndex])\n            indexes.push(String(randIndex))\n        } else {\n            i++\n        }\n    }\n\n    let hardCardsHTML = ''\n    hardCards.forEach((card) => {\n        hardCardsHTML += card\n    })\n\n    if (hardGame) hardGame.innerHTML = hardCardsHTML\n    shuffleCardsAndShow()\n    flipCards(hardCards)\n}\n\nfunction chooseLevel() {\n    if (event) event.preventDefault()\n    startScreen?.classList.remove('visible')\n    stopwatchBox?.classList.add('visible')\n    restartButton?.addEventListener('click', () => {\n        clickSound.play()\n        beginGame()\n    })\n    const cardsArray = createCards()\n\n    radios.forEach((radio) => {\n        if (radio.checked) {\n            level = radio.value\n        }\n    })\n\n    if (level === 'Easy') {\n        easyGame?.classList.add('visible-cards')\n        showEasyScreen(cardsArray)\n    } else if (level === 'Medium') {\n        mediumGame?.classList.add('visible-cards')\n        showMediumScreen(cardsArray)\n    } else if (level === 'Hard') {\n        hardGame?.classList.add('visible-cards')\n        showHardScreen(cardsArray)\n    }\n\n    const startStopwatch = (): void => {\n        seconds++\n        if (secondsBox && minutesBox) {\n            secondsBox.innerHTML = '0' + seconds\n\n            if (seconds > 9) {\n                secondsBox.innerHTML = String(seconds)\n            }\n\n            if (seconds > 59) {\n                minutes++\n                minutesBox.innerHTML = '0' + minutes\n                seconds = 0\n            }\n\n            if (minutes > 9) {\n                minutesBox.innerHTML = String(minutes)\n            }\n        }\n    }\n\n    if (stopwatchBox) {\n        setTimeout(() => {\n            interval = Number(setInterval(startStopwatch, 1000))\n        }, 5000)\n    }\n}\n\nfunction beginGame() {\n    minutes = 0\n    seconds = 0\n    busy = true\n    cardToCompare = null\n    matchedCards = []\n    if (secondsBox) secondsBox.innerHTML = '00'\n    if (minutesBox) minutesBox.innerHTML = '00'\n    clearInterval(interval)\n    gameOverSound.pause()\n    victorySound.pause()\n    gameOverSound.currentTime = 0\n    victorySound.currentTime = 0\n\n    startScreen?.classList.add('visible')\n    easyGame?.classList.remove('visible-cards')\n    hardGame?.classList.remove('visible-cards')\n    mediumGame?.classList.remove('visible-cards')\n    stopwatchBox?.classList.remove('visible')\n    victoryScreen?.classList.remove('visible')\n\n    if (formElement) formElement.addEventListener('submit', chooseLevel)\n}\n\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', beginGame)\n} else {\n    beginGame()\n}\n"],"names":["busy","interval","radios","Array","from","document","querySelectorAll","startScreen","querySelector","victoryScreen","spentMinutes","spentSeconds","victoryButton","getElementById","victoryLoseText","victoryLoseIcon","easyGame","mediumGame","hardGame","restartButton","stopwatchBox","minutesBox","secondsBox","formElement","button","level","minutes","seconds","cardToCompare","result","matchedCards","flipSound","Audio","matchSound","victorySound","gameOverSound","clickSound","showVictoryLoseScreen","classList","add","remove","innerHTML","addEventListener","play","beginGame","flipCards","nums","forEach","card","canFlipCard","setTimeout","dataset","index","push","console","log","length","checkForCardMatch","shuffleCardsAndShow","cards","i","randIndex","Math","floor","random","style","order","String","chooseLevel","event","preventDefault","cardsArray","allCards","createCards","radio","checked","value","easyCards","indexes","includes","easyCardsHTML","showEasyScreen","mediumCards","mediumCardsHTML","showMediumScreen","hardCards","hardCardsHTML","showHardScreen","startStopwatch","Number","setInterval","clearInterval","pause","currentTime","readyState"],"sourceRoot":""}